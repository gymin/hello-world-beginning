# Plotting of 3 or more variables 
## Three numeric variables 
## Two numeric variables and one categorical variable 
## One numeric variable and two categorical variables 
## Three categorical variables 

## Shape for qualitateive data
## Sie for quantitative data (e.g. value proportional to radius or area) 
## Color for qualitative and quantitative data 

#1. Encoding via Shape 
cat_markers = [['A', 'o'],   ## 'o': circular marker
               ['B', 's']]   ## 's': square marker 

for cat, marker in cat_markers:
    df_cat = df[df['cat_var1'] == cat]
    plt.scatter(data = df_cat, x = 'num_var1', y = 'num_var2', marker = marker)
plt.legend(['A','B'])

#2. Encoding via Size 
plt.scatter(data = df, x = 'num_var1', y = 'num_var2', s = 'num_var3')

# dummy series for adding legend
sizes = [20, 35, 50]
base_color = sb.color_palette()[0]
legend_obj = []
for s in sizes:
    legend_obj.append(plt.scatter([], [], s = s, color = base_color))
plt.legend(legend_obj, sizes)

#1/2. A warning on Combining Encodings 
## The code to depict the plot and a reasonable legend gets complicated 
## Point areas won't all be the same even with the same value, depdending on the shape of the marker 
plt.figure(figsize = [5,5])

common_size = 2500
plt.scatter([0],[1], marker = 's', s = common_size)
plt.scatter([1],[1], marker = '^', s = common_size)
plt.scatter([0],[0], marker = 'o', s = common_size)
plt.scatter([1],[0], marker = 'X', s = common_size)

# a little bit of aesthetic cleaning
plt.xlim(-0.5,1.5)
plt.xticks([])
plt.ylim(-0.5,1.5)
plt.yticks([])

#3. Encoding via Color 
## Qualitative variable: you can set different colors for different levels of a categorica varialbe 
##                      through the "hue" parameter on seaborn's FacetGrid class 
g = sb.FacetGrid(data = df, hue = 'cat_var1', size = 5)
g.map(plt.scatter, 'num_var1', 'num_var2')
g.add_legend()

## Quantitative variable: we can set color based on numeric value in the 'scatter' function
##                        through the "c" parameter
lt.scatter(data = df, x = 'num_var1', y = 'num_var2', c = 'num_var3')
plt.colorbar()

## Qualitataive palettes for nominal-type data 
sb.palplot(sb.color_palette(n_colors=9))

## Sequntial palette for ordinal and numeric-type data 
sb.palplot(sb.color_palette('viridis', 9))

## Diverging palette when there is a meaningful zero or center value for the variable 
sb.palplot(sb.color_palette('vlag', 9))

## Setting the color palette: in FacetGrid through the 'palette' parameter
##                       OR    in 'scatter' through the 'cmap' parameter 
g = sb.FacetGrid(data = df, hue = 'cat_var1', size = 5,
                 palette = 'colorblind')
g.map(plt.scatter, 'num_var1', 'num_var2')
g.add_legend()

## OR 
plt.scatter(data = df, x = 'num_var1', y = 'num_var2', c = 'num_var3',
            cmap = 'mako_r')
plt.colorbar()

## Be aware of the effect of transparency and overlap on interpretability 
### to be safe, either avoid or minimizse transparency in plots with color
###             OR plot only a sample of your points in order to make sure that the effect of the 3rd variable is clearly visible 
plt.figure(figsize = [5,5])

# left: qualitative points
plt.scatter(0,0.5,s = 1e4, c = sb.color_palette()[0], alpha = 0.5)
plt.scatter(0,-0.5,s = 1e4, c = sb.color_palette()[1], alpha = 0.5)

# right: quantitative points
plt.scatter(1,0.5,s = 1e4, c = sb.color_palette('Blues')[2], alpha = 0.5)
plt.scatter(1,-0.5,s = 1e4, c = sb.color_palette('Blues')[4], alpha = 0.5)

# set axes for point overlap
plt.xlim(-0.5,1.5)
plt.ylim(-3.5,3.5)
plt.xticks([])
plt.yticks([])

...................................

 
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sb 
%matplotlib inline 

## Example of fuel efficiency (fule_econ) and pokemon data

### Fuel_econ: a scatter plot of fuel mileage (displ) against engine size (comb)

np.random.seed(2018) 
sample = np.random.choice(fuel_econ.shape[0], 200, replace = False)
fuel_econ_subset = fuel_econ.loc[sample] 

sb.regplot(data = fuel_econ_subset, x = 'displ', y = 'comb', 
            x_jitter = 0.04, fit_reg = False);
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 

## now add 'transmission' type: first set up the list 

ttype_markers = [['Automatic', 'o'], ['Manual', '^']]

for ttype, marker in ttype_markers:
      plot_data = fuel_econ_subset.loc[fule_econ_subset['trans_type'] == ttype]
      sb.regplot(data = plot_data, x = 'displ', y = 'comb', 
                 x_jitter = 0.04, fit_reg = False, marker = marker);
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 
plt.legent(['Automatic', 'Manual']); 

## how about adding 'CO2'? (Quantitative data): Use Marker Sizes 

sb.regplot(data = fuel_econ_subset, x = 'displ', y = 'comb', 
            x_jitter = 0.04, fit_reg = False, 
            scatter_kws = {'s': fuel_econ_subset['co2']}); 
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 

### if we want to reduce the marker size to half....
sb.regplot(data = fuel_econ_subset, x = 'displ', y = 'comb', 
            x_jitter = 0.04, fit_reg = False, 
            scatter_kws = {'s': fuel_econ_subset['co2']/2}); 
plt.legend([size?]) 

### legend is triker so we can set the loop

sb.regplot(data = fuel_econ_subset, x = 'displ', y = 'comb', 
            x_jitter = 0.04, fit_reg = False, 
            scatter_kws = {'s': fuel_econ_subset['co2']/2}); 
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 

sizes = [200, 350, 500]  ## size legend reference 
base_color = sb.color-palette()[0]
legend_obj = []
for s in sizes:
    legend_obj.append(plt.scatter([],[], s=s/2, color = base-color))
plt.legend(legend_obj, sizes, title = 'CO2 (g/mi)');
## first one is the one depicted in the legend, second: a list of labels

## add a Qualitative data wiht color (FacetGrid)

g = sb.FacetGrid(data = fuel_econ_subset, hue = 'trans_type', 
                 hue_order = ['Automatic', 'Manual'], size = 4, aspect = 1.5)
g.map(sb.regplot, 'displ', 'comb', x_jitter = 0.04, fit_reg = False);
g.add_legend()
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 

## Add an Ordinal data (VClass): viridis_r 

g = sb.FacetGrid(data = fuel_econ_subset, hue = 'VClass', 
                 size = 4, aspect = 1.5, palette = 'viridis_r')
g.map(sb.regplot, 'displ', 'comb', x_jitter = 0.04, fit_reg = False);
g.add_legend()
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 

## Add a numerical data (CO2): Scatter 

plt.scatter(data = fuel_econ_subset, x = 'displ', y = 'comb', c = 'co2',
             cmap = 'viridis-r')
plt.colorbar(label = 'CO2 (g/mi)')
plt.xlabel('Displacement (l)')
plt.ylabel('Combined Fuel Eff. (mpg)'); 

